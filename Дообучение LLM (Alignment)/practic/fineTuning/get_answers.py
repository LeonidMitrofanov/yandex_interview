import os
import json
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
from dotenv import load_dotenv
from yandex_cloud_ml_sdk import YCloudML
from time import sleep
from random import random

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
INPUT_PATH = "output/dataset.jsonl"
OUTPUT_PATH = "output/output_with_model_responses.jsonl"
FOLDER_ID = "b1ge6b93hbtf0j5b7ptt"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π folder_id
MODEL_NAME = "yandexgpt-lite"
TEMPERATURE = 0.3
MAX_TOKENS = 1024
MAX_WORKERS = 8
RETRY_ATTEMPTS = 2

# === –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
save_lock = threading.Lock()

def save_partial_result(result):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSONL —Ñ–∞–π–ª."""
    with save_lock:
        with open(OUTPUT_PATH, "a", encoding="utf-8") as f:
            f.write(json.dumps(result, ensure_ascii=False) + "\n")

def create_context_aware_prompt(user_question, context_text):
    system_prompt = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. 

–ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
2. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Å–∫–∞–∂–∏ "–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º"
3. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
4. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
5. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º

–¢–ï–ö–°–¢ –î–õ–Ø –û–¢–í–ï–¢–ê:
"""
    
    user_prompt = f"""–í–û–ü–†–û–°: {user_question}

–û–¢–í–ï–¢ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):"""
    
    return [
        {"role": "system", "text": system_prompt + context_text},
        {"role": "user", "text": user_prompt}
    ]

def extract_context_from_item(item):
    context_parts = []
    for req in item.get("request", []):
        if "text" in req:
            context_parts.append(req["text"])
    if "response" in item:
        context_parts.append(item["response"])
    return "\n\n".join(context_parts)

def process_item(sdk, item, index):
    user_question = item["request"][0]["text"]
    context_text = extract_context_from_item(item)
    
    model_response = ""
    last_exception = None
    attempt = 0

    while attempt <= RETRY_ATTEMPTS:
        attempt += 1
        try:
            model = sdk.chat.completions(MODEL_NAME).configure(
                temperature=TEMPERATURE, max_tokens=MAX_TOKENS
            )
            messages = create_context_aware_prompt(user_question, context_text)
            result = model.run(messages)
            model_response = result.text if hasattr(result, "text") else str(result)
            break
        except Exception as e:
            last_exception = e
            sleep_time = (2 ** (attempt - 1)) * 0.5 + random() * 0.3
            sleep(sleep_time)
            continue

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ request –∏ response
    new_item = {
        "request": item["request"],
        "response": model_response if model_response else item.get("response", "")
    }

    if last_exception and not model_response:
        new_item["response"] = item.get("response", "")

    save_partial_result(new_item)
    return index

def main():
    load_dotenv()
    api_key = os.getenv("YANDEX_API")
    
    if not api_key:
        raise ValueError("–û—à–∏–±–∫–∞: YANDEX_API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    sdk = YCloudML(folder_id=FOLDER_ID, auth=api_key)
    sdk.setup_default_logging()
    
    # –ß–∏—Ç–∞–µ–º JSONL —Ñ–∞–π–ª
    data = []
    with open(INPUT_PATH, "r", encoding="utf-8") as f:
        for line in f:
            if line.strip():
                data.append(json.loads(line))
    
    print(f"üîπ –ù–∞–π–¥–µ–Ω–æ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n")
    
    # –û—á–∏—â–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(OUTPUT_PATH):
        os.remove(OUTPUT_PATH)
    
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = {executor.submit(process_item, sdk, item, i): i for i, item in enumerate(data, start=1)}
        for future in tqdm(as_completed(futures), total=len(futures), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", ncols=100):
            try:
                _ = future.result()
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ:", e)
    
    print(f"\n‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_PATH}")

if __name__ == "__main__":
    main()
