import os
import json
import threading
import re
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
from dotenv import load_dotenv
from yandex_cloud_ml_sdk import YCloudML
from time import sleep
from random import random

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
INPUT_PATH = "output/qa_prompts_detailed.json"
OUTPUT_PATH = "practic/fineTuning/output/qa_results_detailed.json"

FOLDER_ID = "b1ge6b93hbtf0j5b7ptt"
MODEL_NAME = "yandexgpt-lite"
TEMPERATURE = 0.3
MAX_TOKENS = 1024
MAX_WORKERS = 8  # —É–≤–µ–ª–∏—á—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –µ—Å–ª–∏ API –ø–æ–∑–≤–æ–ª—è–µ—Ç
RETRY_ATTEMPTS = 2  # –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–≤—Ç–æ—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫


# === –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
save_lock = threading.Lock()

def save_partial_result(result):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON-—Ñ–∞–π–ª (append-—Å—Ç–∏–ª—å)."""
    with save_lock:
        if not os.path.exists(OUTPUT_PATH):
            with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
                json.dump([result], f, ensure_ascii=False, indent=2)
            return

        # —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        with open(OUTPUT_PATH, "r+", encoding="utf-8") as f:
            try:
                data = json.load(f)
                if not isinstance(data, list):
                    data = []
            except json.JSONDecodeError:
                data = []
            data.append(result)
            f.seek(0)
            json.dump(data, f, ensure_ascii=False, indent=2)
            f.truncate()


# === –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ ===
def strip_markdown_codeblocks(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç ```...``` –∏ `...` –±–ª–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ –æ–±—ë—Ä—Ç–æ–∫."""
    # —É–¥–∞–ª–∏—Ç—å —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º
    text = re.sub(r"```[\s\S]*?```", lambda m: m.group(0).strip("`"), text, flags=re.DOTALL)
    # —É–¥–∞–ª–∏—Ç—å inline-–∫–æ–¥ `...`
    text = re.sub(r"`([^`]+)`", r"\1", text)
    # —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –≤–µ–¥—É—â–∏–µ/–∑–∞–º—ã–∫–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return text.strip()


def extract_first_json_object(text: str):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π {...} —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –µ–≥–æ."""
    # –∂–∞–¥–Ω–æ –Ω–∞–π–¥—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è }
    # –ø–æ–¥—Ö–æ–¥: –Ω–∞–π–¥–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å (—Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤ –∫–æ–Ω—Ü–µ)
    matches = list(re.finditer(r"\{[\s\S]*\}", text))
    # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º (—á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å –ø–æ–ª–Ω—ã–π JSON)
    matches.sort(key=lambda m: -len(m.group(0)))
    for m in matches:
        candidate = m.group(0)
        try:
            return json.loads(candidate)
        except Exception:
            continue
    return None


def extract_questions_array_from_json(obj):
    """–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ dict, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –ø–æ–ª–µ questions."""
    if isinstance(obj, dict):
        if "questions" in obj and isinstance(obj["questions"], list):
            # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî —Å—Ç—Ä–æ–∫–∏
            return [str(x).strip() for x in obj["questions"]]
    return None


def try_extract_questions_from_text(text: str):
    """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    original = text
    text = strip_markdown_codeblocks(text)

    # 1) –ø–æ–ª–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç
    json_obj = extract_first_json_object(text)
    if json_obj is not None:
        qs = extract_questions_array_from_json(json_obj)
        if qs:
            return qs, "parsed_full_json"

        # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç questions, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∫–ª—é—á–∏
        for key in ("result", "output", "answers"):
            if key in json_obj and isinstance(json_obj[key], list):
                return [str(x).strip() for x in json_obj[key]], f"parsed_json_key_{key}"

    # 2) –Ω–∞–π—Ç–∏ —è–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ "questions": [ ... ]
    m = re.search(r"\"questions\"\s*:\s*(\[[\s\S]*?\])", text)
    if m:
        arr_text = m.group(1)
        try:
            arr = json.loads(arr_text)
            if isinstance(arr, list):
                return [str(x).strip() for x in arr], "parsed_questions_array"
        except Exception:
            # –ø–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ–æ—á–∏—â–µ–Ω–∏—è: –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
            try:
                arr_text2 = arr_text.replace("'", "\"")
                arr = json.loads(arr_text2)
                if isinstance(arr, list):
                    return [str(x).strip() for x in arr], "parsed_questions_array_after_replace"
            except Exception:
                pass

    # 3) –∫–∞–∫ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã (–∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ?)
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    question_lines = [ln for ln in lines if ln.endswith("?")]
    if question_lines:
        # —É–±–µ—Ä—ë–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Ç–∏–ø–∞ "1. " –∏–ª–∏ "- "
        cleaned = [re.sub(r"^\s*[\-\d\.\)\:]+\s*", "", q).strip() for q in question_lines]
        return cleaned, "extracted_lines_ending_q"

    # 4) –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –¥–ª–∏–Ω–Ω—ã–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç—ã
    quoted = re.findall(r"\"([^\"]{10,})\"", text)
    if quoted:
        # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ/–º—É—Å–æ—Ä
        filtered = [q.strip() for q in quoted if len(q.strip()) > 10 and q.strip().endswith("?")]
        if filtered:
            return filtered, "extracted_quoted_questions"

    # 5) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π fallback ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
    return [], "no_extraction"


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ (—Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —á–∏—Å—Ç–∫–æ–π) ===
def process_prompt(sdk, item, index):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–º—Ç, –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."""
    prompt_text = item["prompt"]
    model = None

    attempt = 0
    last_exception = None
    raw_output = ""
    parse_status = ""
    questions = []

    while attempt <= RETRY_ATTEMPTS:
        attempt += 1
        try:
            model = sdk.chat.completions(MODEL_NAME).configure(
                temperature=TEMPERATURE, max_tokens=MAX_TOKENS
            )
            messages = [
                {"role": "system", "text": "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å –∏—Ö"},
                {"role": "user", "text": prompt_text},
            ]
            result = model.run(messages)
            raw_output = result.text if hasattr(result, "text") else str(result)
            # –ø–∞—Ä—Å–∏–º
            questions, parse_status = try_extract_questions_from_text(raw_output)
            break  # —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ parse failed ‚Äî –º—ã –≤—ã–π–¥–µ–º –∏ –∑–∞–ø–∏—à–µ–º)
        except Exception as e:
            last_exception = e
            # –ª—ë–≥–∫–∏–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–∫–æ—Ñ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
            sleep_time = (2 ** (attempt - 1)) * 0.5 + random() * 0.3
            sleep(sleep_time)
            continue

    record = {
        "prompt": prompt_text,
        "questions": questions,
        "source_chunk": item.get("source_chunk", ""),
        "metadata": item.get("metadata", {}),
        "prompt_type": item.get("prompt_type", "factual_questions"),
        "raw_output": raw_output,
        "parse_status": parse_status,
        "attempts": attempt,
    }

    if last_exception and not raw_output:
        record["error"] = str(last_exception)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    save_partial_result(record)
    return index


def main():
    load_dotenv()
    api_key = os.getenv("YANDEX_API")

    if not api_key:
        raise ValueError("–û—à–∏–±–∫–∞: YANDEX_API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    sdk = YCloudML(folder_id=FOLDER_ID, auth=api_key)
    sdk.setup_default_logging()

    with open(INPUT_PATH, "r", encoding="utf-8") as f:
        data = json.load(f)

    print(f"üîπ –ù–∞–π–¥–µ–Ω–æ {len(data)} –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n")

    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = {executor.submit(process_prompt, sdk, item, i): i for i, item in enumerate(data, start=1)}
        for future in tqdm(as_completed(futures), total=len(futures), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–æ–≤", ncols=100):
            try:
                _ = future.result()
            except Exception as e:
                # –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ—Ç–æ–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                print("–û—à–∏–±–∫–∞ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞:", e)

    print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ–º—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å —á–∏—Å—Ç–∫–æ–π) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_PATH}")


if __name__ == "__main__":
    main()
